// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: consul.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConsulEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsulEmpty) Reset() {
	*x = ConsulEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsulEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsulEmpty) ProtoMessage() {}

func (x *ConsulEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsulEmpty.ProtoReflect.Descriptor instead.
func (*ConsulEmpty) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0}
}

type AgentWeights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passing int32 `protobuf:"varint,1,opt,name=passing,proto3" json:"passing,omitempty"`
	Warning int32 `protobuf:"varint,2,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *AgentWeights) Reset() {
	*x = AgentWeights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentWeights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentWeights) ProtoMessage() {}

func (x *AgentWeights) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentWeights.ProtoReflect.Descriptor instead.
func (*AgentWeights) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{1}
}

func (x *AgentWeights) GetPassing() int32 {
	if x != nil {
		return x.Passing
	}
	return 0
}

func (x *AgentWeights) GetWarning() int32 {
	if x != nil {
		return x.Warning
	}
	return 0
}

type ServiceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ServiceAddress) Reset() {
	*x = ServiceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAddress) ProtoMessage() {}

func (x *ServiceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAddress.ProtoReflect.Descriptor instead.
func (*ServiceAddress) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServiceAddress) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetServiceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags string `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetServiceArgs) Reset() {
	*x = GetServiceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceArgs) ProtoMessage() {}

func (x *GetServiceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceArgs.ProtoReflect.Descriptor instead.
func (*GetServiceArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{3}
}

func (x *GetServiceArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetServiceArgs) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type GetServiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string                     `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Id                string                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Service           string                     `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Tags              []string                   `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Meta              map[string]string          `protobuf:"bytes,5,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Port              int32                      `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Address           string                     `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	TaggedAddresses   map[string]*ServiceAddress `protobuf:"bytes,8,rep,name=taggedAddresses,proto3" json:"taggedAddresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Weights           *AgentWeights              `protobuf:"bytes,9,opt,name=Weights,proto3" json:"Weights,omitempty"`
	EnableTagOverride bool                       `protobuf:"varint,10,opt,name=enableTagOverride,proto3" json:"enableTagOverride,omitempty"`
}

func (x *GetServiceReply) Reset() {
	*x = GetServiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceReply) ProtoMessage() {}

func (x *GetServiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceReply.ProtoReflect.Descriptor instead.
func (*GetServiceReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceReply) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetServiceReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetServiceReply) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetServiceReply) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetServiceReply) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetServiceReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetServiceReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetServiceReply) GetTaggedAddresses() map[string]*ServiceAddress {
	if x != nil {
		return x.TaggedAddresses
	}
	return nil
}

func (x *GetServiceReply) GetWeights() *AgentWeights {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *GetServiceReply) GetEnableTagOverride() bool {
	if x != nil {
		return x.EnableTagOverride
	}
	return false
}

type NewSessionArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ttl      string `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"` //type like time.Duration
	Behavior string `protobuf:"bytes,3,opt,name=behavior,proto3" json:"behavior,omitempty"`
}

func (x *NewSessionArgs) Reset() {
	*x = NewSessionArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionArgs) ProtoMessage() {}

func (x *NewSessionArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionArgs.ProtoReflect.Descriptor instead.
func (*NewSessionArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{5}
}

func (x *NewSessionArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewSessionArgs) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

func (x *NewSessionArgs) GetBehavior() string {
	if x != nil {
		return x.Behavior
	}
	return ""
}

type ServiceCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *ServiceCheck) Reset() {
	*x = ServiceCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCheck) ProtoMessage() {}

func (x *ServiceCheck) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCheck.ProtoReflect.Descriptor instead.
func (*ServiceCheck) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceCheck) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ServiceCheck) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type SessionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateIndex   uint64          `protobuf:"varint,1,opt,name=CreateIndex,proto3" json:"CreateIndex,omitempty"`
	ID            string          `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string          `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Node          string          `protobuf:"bytes,4,opt,name=Node,proto3" json:"Node,omitempty"`
	LockDelay     string          `protobuf:"bytes,5,opt,name=LockDelay,proto3" json:"LockDelay,omitempty"` //
	Behavior      string          `protobuf:"bytes,6,opt,name=Behavior,proto3" json:"Behavior,omitempty"`
	TTL           string          `protobuf:"bytes,7,opt,name=TTL,proto3" json:"TTL,omitempty"`
	Checks        []string        `protobuf:"bytes,8,rep,name=Checks,proto3" json:"Checks,omitempty"`
	NodeChecks    []string        `protobuf:"bytes,9,rep,name=NodeChecks,proto3" json:"NodeChecks,omitempty"`
	ServiceChecks []*ServiceCheck `protobuf:"bytes,10,rep,name=ServiceChecks,proto3" json:"ServiceChecks,omitempty"`
}

func (x *SessionEntry) Reset() {
	*x = SessionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEntry) ProtoMessage() {}

func (x *SessionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEntry.ProtoReflect.Descriptor instead.
func (*SessionEntry) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{7}
}

func (x *SessionEntry) GetCreateIndex() uint64 {
	if x != nil {
		return x.CreateIndex
	}
	return 0
}

func (x *SessionEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SessionEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionEntry) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *SessionEntry) GetLockDelay() string {
	if x != nil {
		return x.LockDelay
	}
	return ""
}

func (x *SessionEntry) GetBehavior() string {
	if x != nil {
		return x.Behavior
	}
	return ""
}

func (x *SessionEntry) GetTTL() string {
	if x != nil {
		return x.TTL
	}
	return ""
}

func (x *SessionEntry) GetChecks() []string {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *SessionEntry) GetNodeChecks() []string {
	if x != nil {
		return x.NodeChecks
	}
	return nil
}

func (x *SessionEntry) GetServiceChecks() []*ServiceCheck {
	if x != nil {
		return x.ServiceChecks
	}
	return nil
}

type NewSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NewSessionReply) Reset() {
	*x = NewSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionReply) ProtoMessage() {}

func (x *NewSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionReply.ProtoReflect.Descriptor instead.
func (*NewSessionReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{8}
}

func (x *NewSessionReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SessionInfoArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SessionInfoArgs) Reset() {
	*x = SessionInfoArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfoArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfoArgs) ProtoMessage() {}

func (x *SessionInfoArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfoArgs.ProtoReflect.Descriptor instead.
func (*SessionInfoArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{9}
}

func (x *SessionInfoArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SessionInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *SessionEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *SessionInfoReply) Reset() {
	*x = SessionInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfoReply) ProtoMessage() {}

func (x *SessionInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfoReply.ProtoReflect.Descriptor instead.
func (*SessionInfoReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{10}
}

func (x *SessionInfoReply) GetEntry() *SessionEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type DestroySessionArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroySessionArgs) Reset() {
	*x = DestroySessionArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroySessionArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroySessionArgs) ProtoMessage() {}

func (x *DestroySessionArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroySessionArgs.ProtoReflect.Descriptor instead.
func (*DestroySessionArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{11}
}

func (x *DestroySessionArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type KVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// CreateIndex holds the index corresponding the creation of this KVPair. This
	// is a read-only field.
	CreateIndex uint64 `protobuf:"varint,2,opt,name=CreateIndex,proto3" json:"CreateIndex,omitempty"`
	// ModifyIndex is used for the Check-And-Set operations and can also be fed
	// back into the WaitIndex of the QueryOptions in order to perform blocking
	// queries.
	ModifyIndex uint64 `protobuf:"varint,3,opt,name=ModifyIndex,proto3" json:"ModifyIndex,omitempty"`
	// LockIndex holds the index corresponding to a lock on this key, if any. This
	// is a read-only field.
	LockIndex uint64 `protobuf:"varint,4,opt,name=LockIndex,proto3" json:"LockIndex,omitempty"`
	// Flags are any user-defined flags on the key. It is up to the implementer
	// to check these values, since Consul does not treat them specially.
	Flags uint64 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Value is the value for the key. This can be any value, but it will be
	// base64 encoded upon transport.
	Value []byte `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
	// Session is a string representing the ID of the session. Any other
	// interactions with this key over the same session must specify the same
	// session ID.
	Session string `protobuf:"bytes,7,opt,name=Session,proto3" json:"Session,omitempty"`
}

func (x *KVPair) Reset() {
	*x = KVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPair) ProtoMessage() {}

func (x *KVPair) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPair.ProtoReflect.Descriptor instead.
func (*KVPair) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{12}
}

func (x *KVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVPair) GetCreateIndex() uint64 {
	if x != nil {
		return x.CreateIndex
	}
	return 0
}

func (x *KVPair) GetModifyIndex() uint64 {
	if x != nil {
		return x.ModifyIndex
	}
	return 0
}

func (x *KVPair) GetLockIndex() uint64 {
	if x != nil {
		return x.LockIndex
	}
	return 0
}

func (x *KVPair) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *KVPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KVPair) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type KVAcquireArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Session string `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *KVAcquireArgs) Reset() {
	*x = KVAcquireArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVAcquireArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVAcquireArgs) ProtoMessage() {}

func (x *KVAcquireArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVAcquireArgs.ProtoReflect.Descriptor instead.
func (*KVAcquireArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{13}
}

func (x *KVAcquireArgs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVAcquireArgs) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type KVAcquireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *KVAcquireReply) Reset() {
	*x = KVAcquireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVAcquireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVAcquireReply) ProtoMessage() {}

func (x *KVAcquireReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVAcquireReply.ProtoReflect.Descriptor instead.
func (*KVAcquireReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{14}
}

func (x *KVAcquireReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type KVReleaseArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KVReleaseArgs) Reset() {
	*x = KVReleaseArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVReleaseArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVReleaseArgs) ProtoMessage() {}

func (x *KVReleaseArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVReleaseArgs.ProtoReflect.Descriptor instead.
func (*KVReleaseArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{15}
}

func (x *KVReleaseArgs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type KVInfoArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KVInfoArgs) Reset() {
	*x = KVInfoArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVInfoArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVInfoArgs) ProtoMessage() {}

func (x *KVInfoArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVInfoArgs.ProtoReflect.Descriptor instead.
func (*KVInfoArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{16}
}

func (x *KVInfoArgs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type KVInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvpair *KVPair `protobuf:"bytes,1,opt,name=kvpair,proto3" json:"kvpair,omitempty"`
}

func (x *KVInfoReply) Reset() {
	*x = KVInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVInfoReply) ProtoMessage() {}

func (x *KVInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVInfoReply.ProtoReflect.Descriptor instead.
func (*KVInfoReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{17}
}

func (x *KVInfoReply) GetKvpair() *KVPair {
	if x != nil {
		return x.Kvpair
	}
	return nil
}

type KVCasArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvpair *KVPair `protobuf:"bytes,1,opt,name=kvpair,proto3" json:"kvpair,omitempty"`
}

func (x *KVCasArgs) Reset() {
	*x = KVCasArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVCasArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVCasArgs) ProtoMessage() {}

func (x *KVCasArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVCasArgs.ProtoReflect.Descriptor instead.
func (*KVCasArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{18}
}

func (x *KVCasArgs) GetKvpair() *KVPair {
	if x != nil {
		return x.Kvpair
	}
	return nil
}

type KVCasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *KVCasReply) Reset() {
	*x = KVCasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVCasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVCasReply) ProtoMessage() {}

func (x *KVCasReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVCasReply.ProtoReflect.Descriptor instead.
func (*KVCasReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{19}
}

func (x *KVCasReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetConfigArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Sandbox bool   `protobuf:"varint,3,opt,name=sandbox,proto3" json:"sandbox,omitempty"`
}

func (x *GetConfigArgs) Reset() {
	*x = GetConfigArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigArgs) ProtoMessage() {}

func (x *GetConfigArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigArgs.ProtoReflect.Descriptor instead.
func (*GetConfigArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{20}
}

func (x *GetConfigArgs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetConfigArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetConfigArgs) GetSandbox() bool {
	if x != nil {
		return x.Sandbox
	}
	return false
}

type GetConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *GetConfigReply) Reset() {
	*x = GetConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReply) ProtoMessage() {}

func (x *GetConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReply.ProtoReflect.Descriptor instead.
func (*GetConfigReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{21}
}

func (x *GetConfigReply) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetConfigReply) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type KVListArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *KVListArgs) Reset() {
	*x = KVListArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVListArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVListArgs) ProtoMessage() {}

func (x *KVListArgs) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVListArgs.ProtoReflect.Descriptor instead.
func (*KVListArgs) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{22}
}

func (x *KVListArgs) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type KVListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KvPairs []*KVPair `protobuf:"bytes,1,rep,name=kvPairs,proto3" json:"kvPairs,omitempty"`
}

func (x *KVListReply) Reset() {
	*x = KVListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVListReply) ProtoMessage() {}

func (x *KVListReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVListReply.ProtoReflect.Descriptor instead.
func (*KVListReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{23}
}

func (x *KVListReply) GetKvPairs() []*KVPair {
	if x != nil {
		return x.KvPairs
	}
	return nil
}

//	// Address is the optional address of the Consul server. The port, if any
//	// will be removed from here and this will be set to the ServerName of the
//	// resulting config.
//	Address string
//
//	// CAFile is the optional path to the CA certificate used for Consul
//	// communication, defaults to the system bundle if not specified.
//	CAFile string
//
//	// CAPath is the optional path to a directory of CA certificates to use for
//	// Consul communication, defaults to the system bundle if not specified.
//	CAPath string
//
//	// CAPem is the optional PEM-encoded CA certificate used for Consul
//	// communication, defaults to the system bundle if not specified.
//	CAPem []byte
//
//	// CertFile is the optional path to the certificate for Consul
//	// communication. If this is set then you need to also set KeyFile.
//	CertFile string
//
//	// CertPEM is the optional PEM-encoded certificate for Consul
//	// communication. If this is set then you need to also set KeyPEM.
//	CertPEM []byte
//
//	// KeyFile is the optional path to the private key for Consul communication.
//	// If this is set then you need to also set CertFile.
//	KeyFile string
//
//	// KeyPEM is the optional PEM-encoded private key for Consul communication.
//	// If this is set then you need to also set CertPEM.
//	KeyPEM []byte
//
//	// InsecureSkipVerify if set to true will disable TLS host verification.
//	InsecureSkipVerify bool
type ConfigTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	CAFile             string `protobuf:"bytes,2,opt,name=CAFile,proto3" json:"CAFile,omitempty"`
	CAPath             string `protobuf:"bytes,3,opt,name=CAPath,proto3" json:"CAPath,omitempty"`
	CAPem              []byte `protobuf:"bytes,4,opt,name=CAPem,proto3" json:"CAPem,omitempty"`
	CertFile           string `protobuf:"bytes,5,opt,name=CertFile,proto3" json:"CertFile,omitempty"`
	CertPEM            []byte `protobuf:"bytes,6,opt,name=CertPEM,proto3" json:"CertPEM,omitempty"`
	KeyFile            string `protobuf:"bytes,7,opt,name=KeyFile,proto3" json:"KeyFile,omitempty"`
	KeyPEM             []byte `protobuf:"bytes,8,opt,name=KeyPEM,proto3" json:"KeyPEM,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,9,opt,name=InsecureSkipVerify,proto3" json:"InsecureSkipVerify,omitempty"`
}

func (x *ConfigTLSConfig) Reset() {
	*x = ConfigTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTLSConfig) ProtoMessage() {}

func (x *ConfigTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTLSConfig.ProtoReflect.Descriptor instead.
func (*ConfigTLSConfig) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigTLSConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ConfigTLSConfig) GetCAFile() string {
	if x != nil {
		return x.CAFile
	}
	return ""
}

func (x *ConfigTLSConfig) GetCAPath() string {
	if x != nil {
		return x.CAPath
	}
	return ""
}

func (x *ConfigTLSConfig) GetCAPem() []byte {
	if x != nil {
		return x.CAPem
	}
	return nil
}

func (x *ConfigTLSConfig) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ConfigTLSConfig) GetCertPEM() []byte {
	if x != nil {
		return x.CertPEM
	}
	return nil
}

func (x *ConfigTLSConfig) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ConfigTLSConfig) GetKeyPEM() []byte {
	if x != nil {
		return x.KeyPEM
	}
	return nil
}

func (x *ConfigTLSConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type ConfigApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Profile string `protobuf:"bytes,2,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ConfigApplication) Reset() {
	*x = ConfigApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigApplication) ProtoMessage() {}

func (x *ConfigApplication) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigApplication.ProtoReflect.Descriptor instead.
func (*ConfigApplication) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigApplication) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigApplication) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type ConfigConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKey string `protobuf:"bytes,1,opt,name=DataKey,proto3" json:"DataKey,omitempty"`
	Format  string `protobuf:"bytes,2,opt,name=Format,proto3" json:"Format,omitempty"`
}

func (x *ConfigConfig) Reset() {
	*x = ConfigConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigConfig) ProtoMessage() {}

func (x *ConfigConfig) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigConfig.ProtoReflect.Descriptor instead.
func (*ConfigConfig) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigConfig) GetDataKey() string {
	if x != nil {
		return x.DataKey
	}
	return ""
}

func (x *ConfigConfig) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datacenter  string             `protobuf:"bytes,1,opt,name=Datacenter,proto3" json:"Datacenter,omitempty"`
	ZoneAddress string             `protobuf:"bytes,2,opt,name=ZoneAddress,proto3" json:"ZoneAddress,omitempty"`
	Token       string             `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	Application *ConfigApplication `protobuf:"bytes,4,opt,name=Application,proto3" json:"Application,omitempty"`
	Config      *ConfigConfig      `protobuf:"bytes,5,opt,name=Config,proto3" json:"Config,omitempty"`
	TLSConfig   *ConfigTLSConfig   `protobuf:"bytes,6,opt,name=TLSConfig,proto3" json:"TLSConfig,omitempty"`
}

func (x *ConfigReply) Reset() {
	*x = ConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReply) ProtoMessage() {}

func (x *ConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReply.ProtoReflect.Descriptor instead.
func (*ConfigReply) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigReply) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

func (x *ConfigReply) GetZoneAddress() string {
	if x != nil {
		return x.ZoneAddress
	}
	return ""
}

func (x *ConfigReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigReply) GetApplication() *ConfigApplication {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ConfigReply) GetConfig() *ConfigConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ConfigReply) GetTLSConfig() *ConfigTLSConfig {
	if x != nil {
		return x.TLSConfig
	}
	return nil
}

var File_consul_proto protoreflect.FileDescriptor

var file_consul_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x8f, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x0f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x07, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x14, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x54,
	0x54, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x22, 0x25, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x10, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xc2, 0x01, 0x0a, 0x06, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x0d, 0x4b, 0x56, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x4b, 0x56, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a,
	0x0d, 0x4b, 0x56, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x1e, 0x0a, 0x0a, 0x4b, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x34, 0x0a, 0x0b, 0x4b, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x6b, 0x76, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06,
	0x6b, 0x76, 0x70, 0x61, 0x69, 0x72, 0x22, 0x32, 0x0a, 0x09, 0x4b, 0x56, 0x43, 0x61, 0x73, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x6b, 0x76, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x06, 0x6b, 0x76, 0x70, 0x61, 0x69, 0x72, 0x22, 0x26, 0x0a, 0x0a, 0x4b, 0x56,
	0x43, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x22, 0x3e, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x24, 0x0a, 0x0a, 0x4b, 0x56, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0x36, 0x0a, 0x0b, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x07, 0x6b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07,
	0x6b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x41, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43,
	0x41, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x41, 0x50, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x43, 0x41, 0x50, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x65, 0x72, 0x74, 0x50,
	0x45, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x65, 0x72, 0x74, 0x50, 0x45,
	0x4d, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4b,
	0x65, 0x79, 0x50, 0x45, 0x4d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4b, 0x65, 0x79,
	0x50, 0x45, 0x4d, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x22, 0x41, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x6f, 0x6e, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x5a,
	0x6f, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x54, 0x4c, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x4c, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0xa2, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x4b, 0x56, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x4b,
	0x56, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x56, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x4b, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x4b, 0x56, 0x43, 0x61, 0x73, 0x12, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x43, 0x61, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x43, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x30, 0x0a, 0x08, 0x4b, 0x56, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x43, 0x61, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x0b, 0x48, 0x02, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consul_proto_rawDescOnce sync.Once
	file_consul_proto_rawDescData = file_consul_proto_rawDesc
)

func file_consul_proto_rawDescGZIP() []byte {
	file_consul_proto_rawDescOnce.Do(func() {
		file_consul_proto_rawDescData = protoimpl.X.CompressGZIP(file_consul_proto_rawDescData)
	})
	return file_consul_proto_rawDescData
}

var file_consul_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_consul_proto_goTypes = []interface{}{
	(*ConsulEmpty)(nil),        // 0: proto.ConsulEmpty
	(*AgentWeights)(nil),       // 1: proto.AgentWeights
	(*ServiceAddress)(nil),     // 2: proto.ServiceAddress
	(*GetServiceArgs)(nil),     // 3: proto.GetServiceArgs
	(*GetServiceReply)(nil),    // 4: proto.GetServiceReply
	(*NewSessionArgs)(nil),     // 5: proto.NewSessionArgs
	(*ServiceCheck)(nil),       // 6: proto.ServiceCheck
	(*SessionEntry)(nil),       // 7: proto.SessionEntry
	(*NewSessionReply)(nil),    // 8: proto.NewSessionReply
	(*SessionInfoArgs)(nil),    // 9: proto.SessionInfoArgs
	(*SessionInfoReply)(nil),   // 10: proto.SessionInfoReply
	(*DestroySessionArgs)(nil), // 11: proto.DestroySessionArgs
	(*KVPair)(nil),             // 12: proto.KVPair
	(*KVAcquireArgs)(nil),      // 13: proto.KVAcquireArgs
	(*KVAcquireReply)(nil),     // 14: proto.KVAcquireReply
	(*KVReleaseArgs)(nil),      // 15: proto.KVReleaseArgs
	(*KVInfoArgs)(nil),         // 16: proto.KVInfoArgs
	(*KVInfoReply)(nil),        // 17: proto.KVInfoReply
	(*KVCasArgs)(nil),          // 18: proto.KVCasArgs
	(*KVCasReply)(nil),         // 19: proto.KVCasReply
	(*GetConfigArgs)(nil),      // 20: proto.GetConfigArgs
	(*GetConfigReply)(nil),     // 21: proto.GetConfigReply
	(*KVListArgs)(nil),         // 22: proto.KVListArgs
	(*KVListReply)(nil),        // 23: proto.KVListReply
	(*ConfigTLSConfig)(nil),    // 24: proto.ConfigTLSConfig
	(*ConfigApplication)(nil),  // 25: proto.ConfigApplication
	(*ConfigConfig)(nil),       // 26: proto.ConfigConfig
	(*ConfigReply)(nil),        // 27: proto.ConfigReply
	nil,                        // 28: proto.GetServiceReply.MetaEntry
	nil,                        // 29: proto.GetServiceReply.TaggedAddressesEntry
}
var file_consul_proto_depIdxs = []int32{
	28, // 0: proto.GetServiceReply.meta:type_name -> proto.GetServiceReply.MetaEntry
	29, // 1: proto.GetServiceReply.taggedAddresses:type_name -> proto.GetServiceReply.TaggedAddressesEntry
	1,  // 2: proto.GetServiceReply.Weights:type_name -> proto.AgentWeights
	6,  // 3: proto.SessionEntry.ServiceChecks:type_name -> proto.ServiceCheck
	7,  // 4: proto.SessionInfoReply.entry:type_name -> proto.SessionEntry
	12, // 5: proto.KVInfoReply.kvpair:type_name -> proto.KVPair
	12, // 6: proto.KVCasArgs.kvpair:type_name -> proto.KVPair
	12, // 7: proto.KVListReply.kvPairs:type_name -> proto.KVPair
	25, // 8: proto.ConfigReply.Application:type_name -> proto.ConfigApplication
	26, // 9: proto.ConfigReply.Config:type_name -> proto.ConfigConfig
	24, // 10: proto.ConfigReply.TLSConfig:type_name -> proto.ConfigTLSConfig
	2,  // 11: proto.GetServiceReply.TaggedAddressesEntry.value:type_name -> proto.ServiceAddress
	0,  // 12: proto.Consul.Config:input_type -> proto.ConsulEmpty
	20, // 13: proto.Consul.GetConfig:input_type -> proto.GetConfigArgs
	3,  // 14: proto.Consul.GetService:input_type -> proto.GetServiceArgs
	5,  // 15: proto.Consul.NewSession:input_type -> proto.NewSessionArgs
	9,  // 16: proto.Consul.SessionInfo:input_type -> proto.SessionInfoArgs
	11, // 17: proto.Consul.DestroySession:input_type -> proto.DestroySessionArgs
	13, // 18: proto.Consul.KVAcquire:input_type -> proto.KVAcquireArgs
	15, // 19: proto.Consul.KVRelease:input_type -> proto.KVReleaseArgs
	16, // 20: proto.Consul.KVInfo:input_type -> proto.KVInfoArgs
	18, // 21: proto.Consul.KVCas:input_type -> proto.KVCasArgs
	18, // 22: proto.Consul.KVCreate:input_type -> proto.KVCasArgs
	22, // 23: proto.Consul.KVList:input_type -> proto.KVListArgs
	27, // 24: proto.Consul.Config:output_type -> proto.ConfigReply
	21, // 25: proto.Consul.GetConfig:output_type -> proto.GetConfigReply
	4,  // 26: proto.Consul.GetService:output_type -> proto.GetServiceReply
	8,  // 27: proto.Consul.NewSession:output_type -> proto.NewSessionReply
	10, // 28: proto.Consul.SessionInfo:output_type -> proto.SessionInfoReply
	0,  // 29: proto.Consul.DestroySession:output_type -> proto.ConsulEmpty
	14, // 30: proto.Consul.KVAcquire:output_type -> proto.KVAcquireReply
	0,  // 31: proto.Consul.KVRelease:output_type -> proto.ConsulEmpty
	17, // 32: proto.Consul.KVInfo:output_type -> proto.KVInfoReply
	19, // 33: proto.Consul.KVCas:output_type -> proto.KVCasReply
	0,  // 34: proto.Consul.KVCreate:output_type -> proto.ConsulEmpty
	23, // 35: proto.Consul.KVList:output_type -> proto.KVListReply
	24, // [24:36] is the sub-list for method output_type
	12, // [12:24] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_consul_proto_init() }
func file_consul_proto_init() {
	if File_consul_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consul_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsulEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentWeights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSessionArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfoArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroySessionArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVAcquireArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVAcquireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVReleaseArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVInfoArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVCasArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVCasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVListArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consul_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consul_proto_goTypes,
		DependencyIndexes: file_consul_proto_depIdxs,
		MessageInfos:      file_consul_proto_msgTypes,
	}.Build()
	File_consul_proto = out.File
	file_consul_proto_rawDesc = nil
	file_consul_proto_goTypes = nil
	file_consul_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConsulClient is the client API for Consul service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsulClient interface {
	Config(ctx context.Context, in *ConsulEmpty, opts ...grpc.CallOption) (*ConfigReply, error)
	GetConfig(ctx context.Context, in *GetConfigArgs, opts ...grpc.CallOption) (*GetConfigReply, error)
	GetService(ctx context.Context, in *GetServiceArgs, opts ...grpc.CallOption) (*GetServiceReply, error)
	NewSession(ctx context.Context, in *NewSessionArgs, opts ...grpc.CallOption) (*NewSessionReply, error)
	SessionInfo(ctx context.Context, in *SessionInfoArgs, opts ...grpc.CallOption) (*SessionInfoReply, error)
	DestroySession(ctx context.Context, in *DestroySessionArgs, opts ...grpc.CallOption) (*ConsulEmpty, error)
	//对一个kv进行加锁
	//another标志key是否被其它session锁定
	//err==nil && false == another 加锁成功
	KVAcquire(ctx context.Context, in *KVAcquireArgs, opts ...grpc.CallOption) (*KVAcquireReply, error)
	//释放一个session的锁
	KVRelease(ctx context.Context, in *KVReleaseArgs, opts ...grpc.CallOption) (*ConsulEmpty, error)
	//获取kv信息
	KVInfo(ctx context.Context, in *KVInfoArgs, opts ...grpc.CallOption) (*KVInfoReply, error)
	//检查或者设置key
	KVCas(ctx context.Context, in *KVCasArgs, opts ...grpc.CallOption) (*KVCasReply, error)
	KVCreate(ctx context.Context, in *KVCasArgs, opts ...grpc.CallOption) (*ConsulEmpty, error)
	KVList(ctx context.Context, in *KVListArgs, opts ...grpc.CallOption) (*KVListReply, error)
}

type consulClient struct {
	cc grpc.ClientConnInterface
}

func NewConsulClient(cc grpc.ClientConnInterface) ConsulClient {
	return &consulClient{cc}
}

func (c *consulClient) Config(ctx context.Context, in *ConsulEmpty, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) GetConfig(ctx context.Context, in *GetConfigArgs, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) GetService(ctx context.Context, in *GetServiceArgs, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) NewSession(ctx context.Context, in *NewSessionArgs, opts ...grpc.CallOption) (*NewSessionReply, error) {
	out := new(NewSessionReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/NewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) SessionInfo(ctx context.Context, in *SessionInfoArgs, opts ...grpc.CallOption) (*SessionInfoReply, error) {
	out := new(SessionInfoReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/SessionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) DestroySession(ctx context.Context, in *DestroySessionArgs, opts ...grpc.CallOption) (*ConsulEmpty, error) {
	out := new(ConsulEmpty)
	err := c.cc.Invoke(ctx, "/proto.Consul/DestroySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) KVAcquire(ctx context.Context, in *KVAcquireArgs, opts ...grpc.CallOption) (*KVAcquireReply, error) {
	out := new(KVAcquireReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/KVAcquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) KVRelease(ctx context.Context, in *KVReleaseArgs, opts ...grpc.CallOption) (*ConsulEmpty, error) {
	out := new(ConsulEmpty)
	err := c.cc.Invoke(ctx, "/proto.Consul/KVRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) KVInfo(ctx context.Context, in *KVInfoArgs, opts ...grpc.CallOption) (*KVInfoReply, error) {
	out := new(KVInfoReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/KVInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) KVCas(ctx context.Context, in *KVCasArgs, opts ...grpc.CallOption) (*KVCasReply, error) {
	out := new(KVCasReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/KVCas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) KVCreate(ctx context.Context, in *KVCasArgs, opts ...grpc.CallOption) (*ConsulEmpty, error) {
	out := new(ConsulEmpty)
	err := c.cc.Invoke(ctx, "/proto.Consul/KVCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulClient) KVList(ctx context.Context, in *KVListArgs, opts ...grpc.CallOption) (*KVListReply, error) {
	out := new(KVListReply)
	err := c.cc.Invoke(ctx, "/proto.Consul/KVList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsulServer is the server API for Consul service.
type ConsulServer interface {
	Config(context.Context, *ConsulEmpty) (*ConfigReply, error)
	GetConfig(context.Context, *GetConfigArgs) (*GetConfigReply, error)
	GetService(context.Context, *GetServiceArgs) (*GetServiceReply, error)
	NewSession(context.Context, *NewSessionArgs) (*NewSessionReply, error)
	SessionInfo(context.Context, *SessionInfoArgs) (*SessionInfoReply, error)
	DestroySession(context.Context, *DestroySessionArgs) (*ConsulEmpty, error)
	//对一个kv进行加锁
	//another标志key是否被其它session锁定
	//err==nil && false == another 加锁成功
	KVAcquire(context.Context, *KVAcquireArgs) (*KVAcquireReply, error)
	//释放一个session的锁
	KVRelease(context.Context, *KVReleaseArgs) (*ConsulEmpty, error)
	//获取kv信息
	KVInfo(context.Context, *KVInfoArgs) (*KVInfoReply, error)
	//检查或者设置key
	KVCas(context.Context, *KVCasArgs) (*KVCasReply, error)
	KVCreate(context.Context, *KVCasArgs) (*ConsulEmpty, error)
	KVList(context.Context, *KVListArgs) (*KVListReply, error)
}

// UnimplementedConsulServer can be embedded to have forward compatible implementations.
type UnimplementedConsulServer struct {
}

func (*UnimplementedConsulServer) Config(context.Context, *ConsulEmpty) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedConsulServer) GetConfig(context.Context, *GetConfigArgs) (*GetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedConsulServer) GetService(context.Context, *GetServiceArgs) (*GetServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedConsulServer) NewSession(context.Context, *NewSessionArgs) (*NewSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (*UnimplementedConsulServer) SessionInfo(context.Context, *SessionInfoArgs) (*SessionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionInfo not implemented")
}
func (*UnimplementedConsulServer) DestroySession(context.Context, *DestroySessionArgs) (*ConsulEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySession not implemented")
}
func (*UnimplementedConsulServer) KVAcquire(context.Context, *KVAcquireArgs) (*KVAcquireReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVAcquire not implemented")
}
func (*UnimplementedConsulServer) KVRelease(context.Context, *KVReleaseArgs) (*ConsulEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVRelease not implemented")
}
func (*UnimplementedConsulServer) KVInfo(context.Context, *KVInfoArgs) (*KVInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVInfo not implemented")
}
func (*UnimplementedConsulServer) KVCas(context.Context, *KVCasArgs) (*KVCasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVCas not implemented")
}
func (*UnimplementedConsulServer) KVCreate(context.Context, *KVCasArgs) (*ConsulEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVCreate not implemented")
}
func (*UnimplementedConsulServer) KVList(context.Context, *KVListArgs) (*KVListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVList not implemented")
}

func RegisterConsulServer(s *grpc.Server, srv ConsulServer) {
	s.RegisterService(&_Consul_serviceDesc, srv)
}

func _Consul_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsulEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).Config(ctx, req.(*ConsulEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).GetConfig(ctx, req.(*GetConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).GetService(ctx, req.(*GetServiceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSessionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/NewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).NewSession(ctx, req.(*NewSessionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_SessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).SessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/SessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).SessionInfo(ctx, req.(*SessionInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_DestroySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySessionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).DestroySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/DestroySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).DestroySession(ctx, req.(*DestroySessionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_KVAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVAcquireArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).KVAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/KVAcquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).KVAcquire(ctx, req.(*KVAcquireArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_KVRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVReleaseArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).KVRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/KVRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).KVRelease(ctx, req.(*KVReleaseArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_KVInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).KVInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/KVInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).KVInfo(ctx, req.(*KVInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_KVCas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVCasArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).KVCas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/KVCas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).KVCas(ctx, req.(*KVCasArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_KVCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVCasArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).KVCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/KVCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).KVCreate(ctx, req.(*KVCasArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consul_KVList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).KVList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Consul/KVList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).KVList(ctx, req.(*KVListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Consul",
	HandlerType: (*ConsulServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Consul_Config_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Consul_GetConfig_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Consul_GetService_Handler,
		},
		{
			MethodName: "NewSession",
			Handler:    _Consul_NewSession_Handler,
		},
		{
			MethodName: "SessionInfo",
			Handler:    _Consul_SessionInfo_Handler,
		},
		{
			MethodName: "DestroySession",
			Handler:    _Consul_DestroySession_Handler,
		},
		{
			MethodName: "KVAcquire",
			Handler:    _Consul_KVAcquire_Handler,
		},
		{
			MethodName: "KVRelease",
			Handler:    _Consul_KVRelease_Handler,
		},
		{
			MethodName: "KVInfo",
			Handler:    _Consul_KVInfo_Handler,
		},
		{
			MethodName: "KVCas",
			Handler:    _Consul_KVCas_Handler,
		},
		{
			MethodName: "KVCreate",
			Handler:    _Consul_KVCreate_Handler,
		},
		{
			MethodName: "KVList",
			Handler:    _Consul_KVList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consul.proto",
}
